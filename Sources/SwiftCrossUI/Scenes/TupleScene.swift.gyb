%{
maximum_scene_count = 10
}%

%for i in range(2, maximum_scene_count + 1):
public struct TupleScene${i}<
    ${",\n    ".join("Scene%d: Scene" % j for j in range(i))}
>: Scene {
    public typealias Node = TupleSceneNode${i}<
        ${",\n        ".join("Scene%d" % j for j in range(i))}
    >

    %for j in range(i):
    var scene${j}: Scene${j}
    %end

    public init(
        ${",\n        ".join("_ scene%d: Scene%d" % (j, j) for j in range(i))}
    ) {
        %for j in range(i):
        self.scene${j} = scene${j}
        %end
    }
}

public final class TupleSceneNode${i}<
    ${",\n    ".join("Scene%d: Scene" % j for j in range(i))}
>: SceneGraphNode {
    public typealias NodeScene = TupleScene${i}<
        ${",\n        ".join("Scene%d" % j for j in range(i))}
    >

    %for j in range(i):
    var node${j}: Scene${j}.Node
    %end

    public init<Backend: AppBackend>(
        from scene: NodeScene,
        backend: Backend,
        environment: Environment
    ) {
        %for j in range(i):
        node${j} = Scene${j}.Node(from: scene.scene${j}, backend: backend, environment: environment)
        %end
    }

    public func update<Backend: AppBackend>(
        _ newScene: NodeScene?,
        backend: Backend,
        environment: Environment
    ) {
        %for j in range(i):
        node${j}.update(newScene?.scene${j}, backend: backend, environment: environment)
        %end
    }
}
%end
