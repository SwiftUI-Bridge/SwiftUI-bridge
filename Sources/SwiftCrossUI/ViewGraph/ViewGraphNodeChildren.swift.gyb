%{
maximum_child_count = 10
}%

public protocol ViewGraphNodeChildren {
    associatedtype Content: ViewContent where Content.Children == Self
    
    var widgets: [AnyWidget] { get }

    init<Backend: AppBackend>(from content: Content, backend: Backend)

    func update<Backend: AppBackend>(with content: Content, backend: Backend)
}

public struct EmptyViewGraphNodeChildren: ViewGraphNodeChildren {
    public let widgets: [AnyWidget] = []

    public init<Backend: AppBackend>(from content: EmptyViewContent, backend: Backend) {}

    public func update<Backend: AppBackend>(with content: EmptyViewContent, backend: Backend) {}
}

% for i in range(10):
%{
children = []
for j in range(i + 1):
    children.append("Child%d" % j)

struct_type_parameters = ", ".join(["%s: View" % child for child in children])
content_type_parameters = ", ".join(children)
content_type = "ViewContent%d<%s>" % (i + 1, content_type_parameters)
}%

public struct ViewGraphNodeChildren${i + 1}<${struct_type_parameters}>: ViewGraphNodeChildren {
    public typealias Content = ${content_type}
    
    public var widgets: [AnyWidget] {
        return [
% for child in children:
                ${child.lower()}.widget,
% end
        ]
    }

% for child in children:
    public var ${child.lower()}: AnyViewGraphNode<${child}>
% end

    public init<Backend: AppBackend>(from content: Content, backend: Backend) {
% for (i, child) in enumerate(children):
        self.${child.lower()} = AnyViewGraphNode(for: content.view${i}, backend: backend)
% end
    }

    public func update<Backend: AppBackend>(with content: Content, backend: Backend) {
% for (i, child) in enumerate(children):
        ${child.lower()}.update(with: content.view${i})
% end
    }
}
% end
